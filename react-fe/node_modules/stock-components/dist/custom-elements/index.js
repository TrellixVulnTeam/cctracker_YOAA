import { attachShadow, h, createEvent, proxyCustomElement } from '@stencil/core/internal/client';
export { setAssetPath, setPlatformOptions } from '@stencil/core/internal/client';

const apiUrl = "https://www.alphavantage.co/";
const apiKey = "W3P5O9YCZ2GO9FP3";

const customStockCss = ".lds-ring{display:inline-block;position:relative;width:80px;height:80px}.lds-ring div{box-sizing:border-box;display:block;position:absolute;width:64px;height:64px;margin:8px;border:8px solid  purple;border-radius:50%;animation:lds-ring 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;border-color:purple transparent transparent transparent}.lds-ring div:nth-child(1){animation-delay:-0.45s}.lds-ring div:nth-child(2){animation-delay:-0.3s}.lds-ring div:nth-child(3){animation-delay:-0.15s}@keyframes lds-ring{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}";

const CustomStock = class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    attachShadow(this);
    this.isLoading = false;
  }
  recievingSymbol(event) {
    if (this.stockUserInput !== event.detail) {
      this.stockUserInput = event.detail;
      this.fetchStockPrice(this.stockUserInput);
    }
  }
  stockSymbolChanged(newValue, oldValue) {
    console.log("new value : " + newValue);
    console.log("old value : " + oldValue);
    if (this.stockUserInput !== newValue) {
      this.stockUserInput = newValue;
      this.fetchStockPrice(this.stockUserInput);
    }
  }
  fetchStockPrice(symbolValue) {
    this.isLoading = true;
    fetch(`${apiUrl}query?function=GLOBAL_QUOTE&symbol=${symbolValue}&apikey=W3P5O9YCZ2GO9FP3`)
      .then((res) => {
      return res.json();
    })
      .then((jsonRes) => {
      this.isLoading = false;
      this.stockPrice = jsonRes['Global Quote']['05. price'];
      console.log(this.stockPrice);
    })
      .catch(err => {
      this.isLoading = false;
      console.log("catch");
      console.log(err);
    });
  }
  getStockPrice(event) {
    event.preventDefault();
    const symbolValue = this.stockInput.value;
    this.fetchStockPrice(symbolValue);
  }
  componentDidLoad() {
    console.log("component did load method ");
    if (this.stockSymbol) {
      this.stockUserInput = this.stockSymbol;
      this.fetchStockPrice(this.stockSymbol);
    }
  }
  componentWillLoad() {
    console.log("componentWillLoad method ");
  }
  componentWillUpdate() {
    console.log("componentWillUpdate method ");
  }
  componentDidUpdate() {
    console.log("componentDidUpdate method ");
  }
  disconnectedCallback() {
    console.log("disconnectedCallback method ");
  }
  componentDidUnLoad() {
    console.log("componentDidUnLoad method ");
    //clean up activity
  }
  render() {
    console.log("render method");
    let dataContent = "Please enter a Symbol";
    if (!this.stockUserInput) {
      dataContent = "Please enter a Symbol";
    }
    else if (this.stockPrice) {
      dataContent = `price : ${this.stockPrice}`;
    }
    if (this.isLoading) {
      dataContent = h("div", { class: "lds-ring" }, h("div", null), h("div", null), h("div", null), h("div", null));
    }
    return (h("div", null, h("div", null, h("form", { onSubmit: this.getStockPrice.bind(this) }, h("input", { type: "text", ref: (el) => { this.stockInput = el; }, value: this.stockUserInput, onInput: (event) => { this.stockUserInput = event['path'][0]['value']; } }), h("button", { type: "submit", disabled: this.isLoading }, "Fetch"))), h("div", null, dataContent), h("div", null, h("find-stock", null))));
  }
  static get watchers() { return {
    "stockSymbol": ["stockSymbolChanged"]
  }; }
  static get style() { return customStockCss; }
};

const findStockCss = ":host{display:block}";

const FindStock = class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    attachShadow(this);
    this.ucSymbolSelected = createEvent(this, "ucSymbolSelected", 7);
    this.searchResult = [];
  }
  getStocksList(event) {
    event.preventDefault();
    let searchValue = this.searchInput.value;
    fetch(`${apiUrl}query?function=SYMBOL_SEARCH&keywords=${searchValue}&apikey=${apiKey}`)
      .then(res => {
      return res.json();
    })
      .then(parsedJson => {
      console.log(parsedJson);
      this.searchResult = parsedJson['bestMatches'].map((json) => {
        return { name: json['2. name'], symbol: json['1. symbol'] };
      });
      console.log(this.searchResult);
    })
      .catch(err => {
      console.log(err);
    });
  }
  onSelectSymbol(symbol) {
    console.log(symbol);
    this.ucSymbolSelected.emit(symbol);
  }
  render() {
    return (h("div", null, h("form", { onSubmit: (event) => { this.getStocksList(event); } }, h("input", { type: "text", ref: (event) => { this.searchInput = event; } }), h("button", null, "Find Stocks")), h("ul", null, this.searchResult.map((result) => {
      return h("li", { onClick: this.onSelectSymbol.bind(this, result['symbol']) }, " name : ", result['name'], " , symbol : ", result['symbol'], " ");
    }))));
  }
  static get style() { return findStockCss; }
};

function format(first, middle, last) {
  return (first || '') + (middle ? ` ${middle}` : '') + (last ? ` ${last}` : '');
}

const myComponentCss = ":host{display:block}";

const MyComponent = class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    attachShadow(this);
  }
  getText() {
    return format(this.first, this.middle, this.last);
  }
  render() {
    return h("div", null, "Hello, World! I'm ", this.getText());
  }
  static get style() { return myComponentCss; }
};

const CustomStock$1 = /*@__PURE__*/proxyCustomElement(CustomStock, [1,"custom-stock",{"stockSymbol":[1,"stock-symbol"],"isLoading":[32],"stockPrice":[32],"stockUserInput":[32]},[[0,"ucSymbolSelected","recievingSymbol"]]]);
const FindStock$1 = /*@__PURE__*/proxyCustomElement(FindStock, [1,"find-stock",{"searchResult":[32]}]);
const MyComponent$1 = /*@__PURE__*/proxyCustomElement(MyComponent, [1,"my-component",{"first":[1],"middle":[1],"last":[1]}]);
const defineCustomElements = (opts) => {
  if (typeof customElements !== 'undefined') {
    [
      CustomStock$1,
  FindStock$1,
  MyComponent$1
    ].forEach(cmp => {
      if (!customElements.get(cmp.is)) {
        customElements.define(cmp.is, cmp, opts);
      }
    });
  }
};

export { CustomStock$1 as CustomStock, FindStock$1 as FindStock, MyComponent$1 as MyComponent, defineCustomElements };
