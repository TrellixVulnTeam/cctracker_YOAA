import { Component, h, State, Event } from '@stencil/core';
import { apiUrl, apiKey } from './../../env/env';
export class FindStock {
  constructor() {
    this.searchResult = [];
  }
  getStocksList(event) {
    event.preventDefault();
    let searchValue = this.searchInput.value;
    fetch(`${apiUrl}query?function=SYMBOL_SEARCH&keywords=${searchValue}&apikey=${apiKey}`)
      .then(res => {
      return res.json();
    })
      .then(parsedJson => {
      console.log(parsedJson);
      this.searchResult = parsedJson['bestMatches'].map((json) => {
        return { name: json['2. name'], symbol: json['1. symbol'] };
      });
      console.log(this.searchResult);
    })
      .catch(err => {
      console.log(err);
    });
  }
  onSelectSymbol(symbol) {
    console.log(symbol);
    this.ucSymbolSelected.emit(symbol);
  }
  render() {
    return (h("div", null,
      h("form", { onSubmit: (event) => { this.getStocksList(event); } },
        h("input", { type: "text", ref: (event) => { this.searchInput = event; } }),
        h("button", null, "Find Stocks")),
      h("ul", null, this.searchResult.map((result) => {
        return h("li", { onClick: this.onSelectSymbol.bind(this, result['symbol']) },
          " name : ",
          result['name'],
          " , symbol : ",
          result['symbol'],
          " ");
      }))));
  }
  static get is() { return "find-stock"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["find-stock.css"]
  }; }
  static get styleUrls() { return {
    "$": ["find-stock.css"]
  }; }
  static get states() { return {
    "searchResult": {}
  }; }
  static get events() { return [{
      "method": "ucSymbolSelected",
      "name": "ucSymbolSelected",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      }
    }]; }
}
