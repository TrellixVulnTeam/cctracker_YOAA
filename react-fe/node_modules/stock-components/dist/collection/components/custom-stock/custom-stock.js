import { Component, h, State, Listen, Prop, Watch } from '@stencil/core';
import { apiUrl } from './../../env/env';
export class CustomStock {
  constructor() {
    this.isLoading = false;
  }
  recievingSymbol(event) {
    if (this.stockUserInput !== event.detail) {
      this.stockUserInput = event.detail;
      this.fetchStockPrice(this.stockUserInput);
    }
  }
  stockSymbolChanged(newValue, oldValue) {
    console.log("new value : " + newValue);
    console.log("old value : " + oldValue);
    if (this.stockUserInput !== newValue) {
      this.stockUserInput = newValue;
      this.fetchStockPrice(this.stockUserInput);
    }
  }
  fetchStockPrice(symbolValue) {
    this.isLoading = true;
    fetch(`${apiUrl}query?function=GLOBAL_QUOTE&symbol=${symbolValue}&apikey=W3P5O9YCZ2GO9FP3`)
      .then((res) => {
      return res.json();
    })
      .then((jsonRes) => {
      this.isLoading = false;
      this.stockPrice = jsonRes['Global Quote']['05. price'];
      console.log(this.stockPrice);
    })
      .catch(err => {
      this.isLoading = false;
      console.log("catch");
      console.log(err);
    });
  }
  getStockPrice(event) {
    event.preventDefault();
    const symbolValue = this.stockInput.value;
    this.fetchStockPrice(symbolValue);
  }
  componentDidLoad() {
    console.log("component did load method ");
    if (this.stockSymbol) {
      this.stockUserInput = this.stockSymbol;
      this.fetchStockPrice(this.stockSymbol);
    }
  }
  componentWillLoad() {
    console.log("componentWillLoad method ");
  }
  componentWillUpdate() {
    console.log("componentWillUpdate method ");
  }
  componentDidUpdate() {
    console.log("componentDidUpdate method ");
  }
  disconnectedCallback() {
    console.log("disconnectedCallback method ");
  }
  componentDidUnLoad() {
    console.log("componentDidUnLoad method ");
    //clean up activity
  }
  render() {
    console.log("render method");
    let dataContent = "Please enter a Symbol";
    if (!this.stockUserInput) {
      dataContent = "Please enter a Symbol";
    }
    else if (this.stockPrice) {
      dataContent = `price : ${this.stockPrice}`;
    }
    if (this.isLoading) {
      dataContent = h("div", { class: "lds-ring" },
        h("div", null),
        h("div", null),
        h("div", null),
        h("div", null));
    }
    return (h("div", null,
      h("div", null,
        h("form", { onSubmit: this.getStockPrice.bind(this) },
          h("input", { type: "text", ref: (el) => { this.stockInput = el; }, value: this.stockUserInput, onInput: (event) => { this.stockUserInput = event['path'][0]['value']; } }),
          h("button", { type: "submit", disabled: this.isLoading }, "Fetch"))),
      h("div", null, dataContent),
      h("div", null,
        h("find-stock", null))));
  }
  static get is() { return "custom-stock"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["custom-stock.css"]
  }; }
  static get styleUrls() { return {
    "$": ["custom-stock.css"]
  }; }
  static get properties() { return {
    "stockSymbol": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "stock-symbol",
      "reflect": false
    }
  }; }
  static get states() { return {
    "isLoading": {},
    "stockPrice": {},
    "stockUserInput": {}
  }; }
  static get watchers() { return [{
      "propName": "stockSymbol",
      "methodName": "stockSymbolChanged"
    }]; }
  static get listeners() { return [{
      "name": "ucSymbolSelected",
      "method": "recievingSymbol",
      "target": undefined,
      "capture": false,
      "passive": false
    }]; }
}
